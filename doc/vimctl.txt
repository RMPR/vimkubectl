*vimctl.txt*	Manage Kubernetes resources from Vim

INTRODUCTION                                    *vimctl*

This plugin defines a set of commands and mappings for viewing, editing and
managing Kubernetes resources.

This plugin assumes that the user is logged in to the Kubernetes cluster using
`kubectl` or a similar command.

COMMANDS                                        *vimctl-commands*

:KGet {resource}                                *:KGet*
			Open a split that displays a list of all resources that
			match {resource}. If {resource} is not given, pod is
			used.

:KSave {filename}                               *:KSave*
			Save the currently open manifest to a file.
			If {filename} is not given, the resource name is used.
			(NOTE: This command is only available when viewing
			resource manifests)

MAPPINGS                                        *vimctl-mapping*

These mappings can be used on the split buffers created by |:KGet| or the
manifest buffers when editing a resource.

ii                                              *vimctl_ii*
			Open the resource under the cursor for editing,
			defaults to YAML format.

is                                              *vimctl_is*
			Open the resource in a new split.

iv                                              *vimctl_iv*
			Open the resource in a new vertical split.

it                                              *vimctl_it*
			Open the resource in a new tab.

dd                                              *vimctl_id*
			Delete the resource under the cursor.
			(Prompts for confirmation)

gr                                              *vimctl_gr*
			When used in the resource view buffer:
			Refresh/update the list of resources.

			When used in the manifest edit buffer:
			Update the currently editing manifest.
			(NOTE: This will disregard any local unsaved changes)

CONFIGURATION                                   *vimctl-configuration*

                                                *g:vimctl_command*
Vimctl uses the `kubectl` command for communicating with the cluster. Use the
`g:vimctl_command` variable to specify a different command.
For example, to use OpenShift's `oc` command:
>
    let g:vimctl_command = 'oc'
<

LICENSE                                         *vimctl-license*

MIT

------------------------------------------------------------------------------
vim: ft=help:tw=78:noet:norl:
